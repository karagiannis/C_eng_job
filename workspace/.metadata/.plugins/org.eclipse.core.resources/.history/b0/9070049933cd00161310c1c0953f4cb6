/*
 * sensor.c
 *
 *  Created on: 28 dec 2016
 *      Author: root
 */

void queue_init(QUEUE *q)
{
    memset(q,0,sizeof(QUEUE));
    q->rindex = 0;//Probably un-necessay to do this, because of the above line
    q->windex = 0;
    q->numitems = 0;
}

int queue_enqueue(QUEUE *q,int item)
{
    int num_items = q->numitems;
    //int* temp_array;
    int temp_array[QUEUESIZE];
    int i;

    if(num_items < QUEUESIZE)           //Check to see if the queue is not filled
    {
        //temp_array = (int *)calloc(num_items,sizeof(int));//Allocate temp array with size equal to the content size of the queue
        for(i = 0; i < num_items; i++)
            temp_array[i]= q->items[i];       //Copy the queue to temp array

        q->items[0] = item;                    //Insert the new item in the queue, always at index 0

        for ( i = 1; i < num_items +1; i++)     //Copy back the items from temp array
            q->items[i] = temp_array[i-1];
        //free(temp_array);                             //Dispose the temp array
        q->numitems++;                          //increment the number of items
        q->rindex++;                            //Increment the queue pointer so it points to the next free position in the queue
        return 1;                               //The enqueue succeeded
    }
    else return 0;          //The queue is filled, cannot insert more

}

int queue_dequeue(QUEUE *q)
{
    int num_items = q->numitems;

    if (! num_items == 0)// The queue contains items
    {
        q->rindex--; //Decrement the end pointer because it points to a at the first empty position in the FIFO
         q->numitems--;                 //Decrement the number of items in the queue
         return 1;                      //Return success because the dequeing succeeded/ the queue was not empty
    }
    else return 0;          //The queue is empty, nothing can be dequeued


}


void queue_print(QUEUE *q)
{
    int i = 0;
    for (i = q->numitems-1; i>= 0; i--){  //print in FIFO order, oldest first
#ifdef DEBUG
        alt_printf("%d\n", q->items[i] );
#endif
    }
}
void queue_print_screen(QUEUE *q, int x_origo, int y_origo, int normalization, int offset, int rgb, SENSOR_OBJECT *sensor_obj){
	 int i = 0;
	 int j;
	 int mean = 0;
	 int value;
	    for (i = q->numitems-1; i>= 0; i--){  //print in FIFO order, oldest first
#ifdef DEBUG
	        alt_printf("Un-normalized %d\n normalized %d\n", q->items[i],q->items[i]/normalization );
#endif
	        j = q->numitems-1 -i;
	        mean = mean + q->items[i];
#ifdef DEBUG
	        alt_printf("j%d\n",j);
#endif

	        for(int k = 1; k < 55;k++)
	        	print_pix(x_origo + j, y_origo-k,0);//Blank out previous measurement
	        print_pix(x_origo + j, y_origo,7);//Fix ccordinate system line
	        sensor_obj->draw_graph(sensor_obj);
	        value = offset + q->items[i]/normalization;
	        if(offset + q->items[i]/normalization > 40)
	        	value = 40;
	        if (offset + q->items[i]/normalization < 0)
	          value = 0;

	        print_pix(x_origo + j,y_origo-value,rgb);
	        int  bcd = i2bcd(abs(q->items[0]));
	        if(q->items[0] & 0x80000000)//negative
	        	print_char(x_origo +24, y_origo+30,4,0,'-');

	        	char c = (char)((bcd & 0xF000) >>12);
	        	short s = (short) c +48;
	        	print_char(x_origo +30, y_origo+30,4,0,(char)s);

	        	c = (char)((bcd & 0x0F00) >>8);
	        	s = (short) c +48;
	        	print_char(x_origo +38, y_origo+30,4,0,(char)s);

	        	c = (char)((bcd & 0x0F0) >>4);
	        	s = (short) c +48;
	        	print_char(x_origo +46, y_origo+30,4,0,(char)s);

	        	c = (char)(bcd & 0x0F);
	        	s = (short) c +48;
	        	print_char(x_origo +54, y_origo+30,4,0,(char)s);


	    }
	    mean = mean/q->numitems;
	    int offs = 25 - mean/normalization;
	    sensor_obj->offset = offs;
}

unsigned int i2bcd(unsigned int i) {
    unsigned int binaryShift = 1;
    unsigned int digit;
    unsigned int bcd = 0;
    //alt_printf("%d\n",i);
    while (i > 0) {
        digit = i % 10;
        bcd += (digit << binaryShift);
        binaryShift += 4;
        i /= 10;
    }
    bcd = bcd >> 1;
#ifdef DEBUG
    unsigned int digit,n,mask;
    for (n = 0,mask = 0x80000000;mask != 0;mask>>= 1){
            if((n==4) || (n==8)|| (n == 12)|| n== 16 ||n==20|| n==24 ||n==28)
                putchar(' ');
            putchar((bcd & mask)? '1':'0');
            n++;
        }
    putchar('\n');
#endif

    return bcd;
}

void update_time(unsigned int i){

	static int hours = 0;
	static int minutes = 0;
	static int seconds = 0;
	//static int sub_seconds = 0;
	unsigned int bcd = 0;
	//unsigned int time[3]={hours, minutes,seconds};


		seconds++;


	if(seconds == 60)
	{
		seconds = 0;
		minutes++;
		if (minutes == 60)
		{
			minutes = 0;
			hours++;
		}
	}

	char c;
	short s;
	bcd = i2bcd(hours);
	c = (char)((bcd & 0x0F0) >>4);
	s = (short) c +48;
	print_char(2*320/3-50 +30 +46, 130,4,0,(char)s);

	c = (char)(bcd & 0x0F);
	s = (short) c +48;
	print_char(2*320/3 -50+30 +54,130,4,0,(char)s);

	print_char(2*320/3-50 +30 +54+8,130,4,0,':');

	bcd = i2bcd(minutes);
	c = (char)((bcd & 0x0F0) >>4);
	s = (short) c +48;
	print_char(2*320/3-50 +30 +54+8+8, 130,4,0,(char)s);

	c = (char)(bcd & 0x0F);
	s = (short) c +48;
	print_char(2*320/3-50 +30 +54+8+8+8,130,4,0,(char)s);

	print_char(2*320/3-50 +30 +54+8+8+8+8,130,4,0,':');


	bcd = i2bcd(seconds);
		c = (char)((bcd & 0x0F0) >>4);
		s = (short) c +48;
		print_char(2*320/3-50 +30 +54+40, 130,4,0,(char)s);

		c = (char)(bcd & 0x0F);
		s = (short) c +48;
		print_char(2*320/3-50 +30 +54+48,130,4,0,(char)s);
}

void read_temp(QUEUE *q){
	ADC_INIT;
		alt_u32 temp = ADC_READ_TEMP;
		if(queue_enqueue(q,temp))
;
						else{
							queue_dequeue(q);
							queue_enqueue(q,temp);
						}
		//alt_printf("nu");
#ifdef DEBUG
		 queue_print(q);
#endif
}
void read_light(QUEUE *q){
	ADC_INIT;
			alt_u32 light = ADC_READ_PHOTO;
			if(queue_enqueue(q,light))
;
							else{
								queue_dequeue(q);
								queue_enqueue(q,light);
			//alt_printf("printar nu");
								}
#ifdef DEBUG
		 queue_print(q);
#endif
}
/************************************************/
void config_time_base(alt_u32 time_base, SENSOR_OBJECT* sensor_obj){
	 sensor_obj->time_base = time_base;
}
void init_measurement(SENSOR_OBJECT* sensor_obj){
	queue_init(sensor_obj->q);
	sensor_obj->draw_graph(sensor_obj);
}

void draw_graph(SENSOR_OBJECT* sensor_obj){
	print_char(sensor_obj->x_origo +55,sensor_obj->y_origo -3,7,0,'>');
		print_hline(sensor_obj->x_origo,sensor_obj->y_origo,60,7);

		print_char(sensor_obj->x_origo -4,sensor_obj->y_origo -45,7,0,'^');
		print_vline(sensor_obj->x_origo-1,sensor_obj->y_origo -45,45,7);

		print_str(sensor_obj->x_origo -20, sensor_obj->y_origo +10,7,sensor_obj->description);
}
void update_graph(SENSOR_OBJECT* sensor_obj){
#ifdef DEBUG
	queue_print(sensor_obj->q);
#endif
	queue_print_screen(sensor_obj->q,
			sensor_obj->x_origo,
			sensor_obj->y_origo,
			sensor_obj->normalization_factor,
			sensor_obj->offset,
			sensor_obj->rgb,sensor_obj );
}
void read_accelerometerX(QUEUE *q)
{
	ACCELEROMETER accel_data;
	alt_u8 spi_command_tx[2] = {0x0B, 0x00}; //, 0x00, 0x00}; // read one register from address 0x00
	alt_u8 spi_command_rx[4] = {0xB,0,0,0};
	// ------------------------------------------ Init SPI
		spi_command_tx[0] = WRITE_COMMAND; // write command
		spi_command_tx[1] = 0x2D; // Address 0x2D (go bit location)
		spi_command_tx[2] = 0x02; // go bit value

		alt_avalon_spi_command( ACCELEROMETER_SPI_BASE, 0,
							  3, spi_command_tx,
							  0, spi_command_rx,
							  0);
	// ------------------------------------------ Read SPI
		spi_command_tx[0] = READ_COMMAND; // read command
		spi_command_tx[1] = 0x08; // Address of the data registers


			alt_avalon_spi_command( ACCELEROMETER_SPI_BASE, 0,
								  2, spi_command_tx,
								  3, &accel_data,
								  0);
#ifdef DEBUG
			alt_printf("X:%d\t Y:%d\t Z:%d\t\n",accel_data.x, accel_data.y, accel_data.z);
#endif

		alt_32 accel_x = 0;
		accel_x = (alt_32)accel_data.x;

		if(queue_enqueue(q,accel_x))
;
				else{
					queue_dequeue(q);
					queue_enqueue(q,accel_x);
				}
}
/*
void read_accelerometerY(QUEUE *q)
{
	ACCELEROMETER accel_data;
	alt_u8 spi_command_tx[2] = {0x0B, 0x00}; //, 0x00, 0x00}; // read one register from address 0x00
	alt_u8 spi_command_rx[4] = {0xB,0,0,0};
	// ------------------------------------------ Init SPI
		spi_command_tx[0] = WRITE_COMMAND; // write command
		spi_command_tx[1] = 0x2D; // Address 0x2D (go bit location)
		spi_command_tx[2] = 0x02; // go bit value

		alt_avalon_spi_command( ACCELEROMETER_SPI_BASE, 0,
							  3, spi_command_tx,
							  0, spi_command_rx,
							  0);
	// ------------------------------------------ Read SPI
		spi_command_tx[0] = READ_COMMAND; // read command
		spi_command_tx[1] = 0x08; // Address of the data registers


			alt_avalon_spi_command( ACCELEROMETER_SPI_BASE, 0,
								  2, spi_command_tx,
								  3, &accel_data,
								  0);
#ifdef DEBUG
			alt_printf("X:%d\t Y:%d\t Z:%d\t\n",accel_data.x, accel_data.y, accel_data.z);
#endif

		alt_32 accel_y = 0;
		accel_y = (alt_32)accel_data.y;

		if(queue_enqueue(q,accel_y))
						;
				else{
					queue_dequeue(q);
					queue_enqueue(q,accel_y);
				}
}

void read_accelerometerZ(QUEUE *q)
{
	ACCELEROMETER accel_data;
	alt_u8 spi_command_tx[2] = {0x0B, 0x00}; //, 0x00, 0x00}; // read one register from address 0x00
	alt_u8 spi_command_rx[4] = {0xB,0,0,0};
	// ------------------------------------------ Init SPI
		spi_command_tx[0] = WRITE_COMMAND; // write command
		spi_command_tx[1] = 0x2D; // Address 0x2D (go bit location)
		spi_command_tx[2] = 0x02; // go bit value

		alt_avalon_spi_command( ACCELEROMETER_SPI_BASE, 0,
							  3, spi_command_tx,
							  0, spi_command_rx,
							  0);
	// ------------------------------------------ Read SPI
		spi_command_tx[0] = READ_COMMAND; // read command
		spi_command_tx[1] = 0x08; // Address of the data registers


			alt_avalon_spi_command( ACCELEROMETER_SPI_BASE, 0,
								  2, spi_command_tx,
								  3, &accel_data,
								  0);
#ifdef DEBUG
			alt_printf("X:%d\t Y:%d\t Z:%d\t\n",accel_data.x, accel_data.y, accel_data.z);
#endif

		alt_32 accel_z = 0;
		accel_z = (alt_32)accel_data.z;

		if(queue_enqueue(q,accel_z))
						;
				else{
					queue_dequeue(q);
					queue_enqueue(q,accel_z);
				}
}


